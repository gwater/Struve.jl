#              Struve Functions of first and second kind
#                     struveh(v, x), struvek(v, x)
#
# The Struve function is computed from its power series [1] for small arguments.
# Large arguments are computed from the asymptotic expansions for struvek(v, x) [2].
# Connection formula using bessely(v, x) [3] are used to compute struveh(v, x) from struvek(v, x) and conversely (struvek -> struveh).
# The power series form [1] can only be used for small x and when nu > x otherwise significant cancellation occurs.
# There is a region where the large argument expansion is not valid and where the power series is prone to cancellation.
# In this region we fall back to computing struvek(v, x) from its integral representation [4] using adaptive gaussian integration (QuadGK.jl).
# TODO: Use a different algorithm in this region instead of relying on quadgk that is more efficient and doesn't allocate.
#
# [1] http://dlmf.nist.gov/11.2.E1
# [2] http://dlmf.nist.gov/11.6.E1
# [3] http://dlmf.nist.gov/11.2.E5
# [4] http://dlmf.nist.gov/11.5.E2
#

"""
struveh(nu, x)

Struve function of the first kind of order `nu`.

External links: [DLMF](http://dlmf.nist.gov/11.2.E1), [Wikipedia](https://en.wikipedia.org/wiki/Struve_function)
"""
struveh(v::Real, x::Real) = _struveh(float(v), float(x))
struveh(v, x) = _H_integral(v, x)

_struveh(v, x::AbstractFloat) = _H_integral(v, x)
_struveh(v::Float16, x::Float16) = Float16(_struveh(Float32(v), Float32(x)))

function _struveh(v, x::T) where T <: Union{Float32, Float64}
    if struvek_large_arg_cutoff(v, x)
        # use http://dlmf.nist.gov/11.2.E6
        return struvek_large_argument(v, x) + bessely(v, x)
    elseif struveh_power_series_cutoff(v, x)
        return struveh_power_series(v, x)
    else
        return _H_integral(v, x)
    end
end

"""
struvek(nu, x)

Struve function of the second kind of order `nu`.

External links: [DLMF](http://dlmf.nist.gov/11.2.E5), [Wikipedia](https://en.wikipedia.org/wiki/Struve_function)
"""
struvek(v::Real, x::Real) = _struvek(float(v), float(x))
struvek(v, x) = _K_integral(v, x)

_struvek(v, x::AbstractFloat) = _K_integral(v, x)
_struvek(v::Float16, x::Float16) = Float16(_struvek(Float32(v), Float32(x)))

function _struvek(v::Real, x::T) where T <: Union{Float32, Float64}
    if struvek_large_arg_cutoff(v, x)
        return struvek_large_argument(v, x)
    elseif struveh_power_series_cutoff(v, x)
        return struveh_power_series(v, x) - bessely(v, x)
    else
        return _K_integral(v, x)
    end
end

# H_{nu}(x) Struve function power series
# http://dlmf.nist.gov/11.2.E1
# can use for x < 5 || nu > -0.75 + 0.41x + 0.023x^2
# struve H can be computed with forward recurrence only when x < nu
# backward recurrence may be stable always?
function struveh_power_series(v, x::T) where T
    MaxIter = 50000
    S = promote_type(T, Float64)
    v, x = S(v), S(x)

    out = zero(S)
    a = (x/2) / (SpecialFunctions.gamma(v + S(3)/2) * SpecialFunctions.gamma(S(3)/2))
    iszero(a) && return a
    t2 = (x/2)^2
    for i in 0:MaxIter
        out += a
        abs(a) < eps(T) * abs(out) && break
        a *= -inv((v + i + S(3)/2) * (i + S(3)/2)) * t2
    end
    v = (x/2)^(v/2)
    return T((out * v) * v)
end
struveh_power_series_cutoff(nu, x::Float64) = x < 6 || nu > evalpoly(x, (-0.75, 0.41, 0.023))
struveh_power_series_cutoff(nu, x::Float32) = x < 26 || nu > evalpoly(x, (-10.0f0, 0.1f0, 0.012f0))

# K_{nu}(x) using large argument expansion
# http://dlmf.nist.gov/11.6.E1
function struvek_large_argument(v, x::T) where T
    MaxIter = 5000
    S = promote_type(T, Float64)
    v, x = S(v), S(x)

    out = zero(S)
    a = (x/2)^(v-1) * gamma(one(S)/2) / gamma(v + one(S)/2)
    iszero(a) && return a
    t2 = (2/x)^2
    for i in 0:MaxIter
        out += a
        abs(a) < eps(T) && break
        a *= (i + one(S)/2)*t2 *  (v - one(S)/2 - i)
    end
    return out / T(pi)
end
struvek_large_arg_cutoff(nu, x) = x > 39 && nu < 1.6*x - 43.0


#####
#####  Chebyshev approximation for struvek_{nu}(x)
#####

"""
    struvek_chebyshev(nu, x::T) where T <: Float64
Computes ``struvek_{nu}(x)`` for small to medium arguments x ∈ (6, 36) for any positive order using a Chebyshev approximation.
Forward recurrence is used to fill orders starting at low orders ν ∈ (0, 2). Two sets of Chebyshev coefficients are used for
x ∈ (6, 21) and for x ∈ (21, 36).
"""
function struvek_chebyshev(v, x)
    v_floor, _ = modf(v)
    k0, k1 = struvek_chebyshev_low_orders(v_floor, x)
    return struvek_up_recurrence(x, k1, k0, v_floor + 1, v)
end

# only implemented for Float64 so far
struvek_chebyshev_cutoff(::Number, x) = (x <= 36.0 && x >= 6.0)

# compute bessely for x ∈ (6, 19) and ν ∈ (0, 2) using chebyshev approximation with a (16, 28) grid (see notes to generate below)
# optimized to return both (ν, ν + 1) in around the same time, therefore ν must be in (0, 1)
# no checks are performed on arguments
function struvek_chebyshev_low_orders(v, x)
    # need to rescale inputs according to
    #x0 = (x - lb) * 2 / (ub - lb) - 1
    v1 = v - 1
    v2 = v
    if x <= 21
        x1 = (x - 6) * 2 / 15 - 1
        P = clenshaw_chebyshev.(x1, struvek_cheb_weights_small_args)
        return clenshaw_chebyshev(v1, P), clenshaw_chebyshev(v2, P)
    else
        x1 = (x - 21) * 2 / 15 - 1
        P2 = clenshaw_chebyshev.(x1, struvek_cheb_weights_medium_args)
        return clenshaw_chebyshev(v1, P2), clenshaw_chebyshev(v2, P2)
    end
end

# uses the Clenshaw algorithm to recursively evaluate a linear combination of Chebyshev polynomials
function clenshaw_chebyshev(x, c)
    x2 = 2x
    c0 = c[end-1]
    c1 = c[end]
    for i in length(c)-2:-1:1
        c0, c1 = c[i] - c1, c0 + c1 * x2
    end
    return c0 + c1 * x
end

# Chebyshev coefficients for low orders and small arguments nu ∈ (0, 2), x ∈ (6, 21)
#=
using ArbNumerics, FastChebInterp
g(x) = struveh_power_series(BigFloat(x[1]), BigFloat(x[2])) - bessely(ArbFloat(BigFloat(x[1])), ArbFloat(BigFloat(x[2])))
lb, ub = [0,6], [2, 21]; # lower and upper bounds of the domain, respectively
x = chebpoints((15,26), lb, ub);
c = chebinterp(g.(x), lb, ub);
map(i->tuple(c.coefs[i,:]...), 1:size(c.coefs)[1])
=#
const struvek_cheb_weights_small_args = (
    (1.0600903148769039, 0.3632352848625914, 0.0010851161374722921, -0.0018557941214036502, 0.0007279977414620665, -0.00024851686921717394, 8.130081684522458e-5, -2.6120310499134512e-5, 8.314431978035936e-6, -2.6322295717230936e-6, 8.303745206262542e-7, -2.6129317201237234e-7, 8.206250878372838e-8, -2.5732659135148703e-8, 8.058476106352595e-9, -2.5207063229283656e-9, 7.876720344700522e-10, -2.4590216821018665e-10, 7.670163926852724e-11, -2.390550843994612e-11, 7.445010002012549e-12, -2.3169755466086644e-12, 7.206427050540572e-13, -2.241198679633691e-13, 7.021228328086e-14, -2.3684757858670007e-14, 6.7046083784542785e-15),
    (1.3641616693887388, 0.6861155381416261, -0.013572152872539201, 0.0016216897097483928, -0.00018446712558745364, -2.0769257598453905e-6, 1.408602927868612e-5, -7.751575008377217e-6, 3.3058512404569164e-6, -1.2736007858636134e-6, 4.64668968554841e-7, -1.6387662930009507e-7, 5.64671584841064e-8, -1.9129563993257575e-8, 6.397094532727666e-9, -2.117430244958804e-9, 6.950634550289675e-10, -2.2659480764209265e-10, 7.344438116957806e-11, -2.3687544868742517e-11, 7.607289871487144e-12, -2.4340461148144787e-12, 7.763318833940393e-13, -2.4710860138737025e-13, 7.907862399091614e-14, -2.7328566760003854e-14, 7.579122514774402e-15),
    (0.4237133907775684, 0.38342025542114144, 0.004121221565648119, -0.0012272620859731286, 0.00034973700221856363, -0.00010185724345207509, 3.031863247081242e-5, -9.193611374881707e-6, 2.831033732545689e-6, -8.826979957501292e-7, 2.779211097657813e-7, -8.8152656018215e-8, 2.8110042264254766e-8, -8.996191597933107e-9, 2.885561075553019e-9, -9.26635306271362e-10, 2.97671659881801e-10, -9.559826115819778e-11, 3.067981203732518e-11, -9.835744473492707e-12, 3.149416233503516e-12, -1.0070177508821233e-12, 3.215527203478311e-13, -1.0262581382993229e-13, 3.2985010734183816e-14, -1.1405121861174942e-14, 3.2794280112004626e-15),
    (0.06942523863319067, 0.10731787773340398, 0.013788579330950342, -0.0022446508516219283, 0.0004360553703339396, -9.195340738762741e-5, 2.0362005370618093e-5, -4.675195494264811e-6, 1.1093807032876904e-6, -2.7256573821376264e-7, 6.964782741049656e-8, -1.8595609847544427e-8, 5.200595244476293e-9, -1.5214420538237997e-9, 4.631677480295465e-10, -1.455811481337176e-10, 4.6844242587504516e-11, -1.5312046729379144e-11, 5.052751175081942e-12, -1.6755037603404607e-12, 5.565374016337242e-13, -1.847780119795663e-13, 6.122484997616285e-14, -2.0274949810218693e-14, 6.752433370284285e-15, -2.4413519638936776e-15, 7.150974968867675e-16),
    (0.006048047750985445, 0.013756399727958698, 0.005781376666442182, -0.0003880528480947677, 1.5956998369468173e-6, 1.2389684394081154e-5, -5.228486864324178e-6, 1.713799556723201e-6, -5.129152799759824e-7, 1.4664186236596678e-7, -4.0752865810383884e-8, 1.109009580450955e-8, -2.9627267939550195e-9, 7.766154636758033e-10, -1.991021209725192e-10, 4.9591421709867706e-11, -1.185283053152555e-11, 2.653338040294602e-12, -5.260596407409779e-13, 7.68145297692052e-14, 1.3633186237690586e-15, -7.783009235315315e-15, 4.590206753691987e-15, -2.064587816947166e-15, 8.289665250534502e-16, -3.586874387250506e-16, 1.1102230246251565e-16),
    (0.00018732671596475634, 0.00039361444816178153, 0.0008469412352442367, 0.0001275347377812725, -4.179034006854007e-5, 9.733179732979168e-6, -2.0389961718213938e-6, 3.902100906653983e-7, -6.441353789350002e-8, 7.041574201006352e-9, 7.340758082437725e-10, -8.790078160273099e-10, 4.1644376801820383e-10, -1.6052122946390978e-10, 5.652175567193483e-11, -1.89507948596444e-11, 6.1705956739387365e-12, -1.972795030412066e-12, 6.233679431073711e-13, -1.955615609785058e-13, 6.10984892709658e-14, -1.9020154263904292e-14, 5.936681879710648e-15, -1.8490639930882423e-15, 5.877065216252912e-16, -2.0318504713492448e-16, 5.076067771242903e-17),
    (-2.5965582803861313e-5, -6.965579470157581e-5, 1.077142817010706e-5, 3.935633216153739e-5, -3.6788815996198967e-6, -4.119512300246972e-7, 3.492555155465953e-7, -1.3288934057138054e-7, 4.175362241175054e-8, -1.2033782544920801e-8, 3.2996276094906743e-9, -8.746480761899522e-10, 2.2584897677857745e-10, -5.700170115788842e-11, 1.407250149882078e-11, -3.393898875128082e-12, 7.968625764807072e-13, -1.810559711325991e-13, 3.937084003519249e-14, -8.09132818561379e-15, 1.4685828396937265e-15, -2.375206874354515e-16, -1.9204278480845808e-18, 1.91709184140001e-18, -1.632641671428941e-17, 5.377642775528102e-18, -1.005250014283996e-18),
    (-3.909082469245531e-6, -4.521783124752572e-6, -7.372209395015117e-6, 1.5103217087196772e-6, 1.1793562812310566e-6, -3.897352996229587e-7, 8.510773050863582e-8, -1.3806733437417193e-8, 9.91831832008484e-10, 4.579704697258139e-10, -3.070315464921786e-10, 1.281128557533771e-10, -4.557667244679797e-11, 1.4946062871909792e-11, -4.663190066270212e-12, 1.4062793448457138e-12, -4.13585438790823e-13, 1.1921405418369828e-13, -3.3809425126084616e-14, 9.437100280801868e-15, -2.5903695320522465e-15, 7.123698944212953e-16, -1.8583913287780239e-16, 4.1790016737339674e-17, -1.93532867794233e-17, -1.1505331053970535e-17, -4.928115874782189e-18),
    (-2.295229847387654e-8, 7.598707507773147e-8, -2.566110253172722e-7, -3.918859826637032e-7, 1.4139141182906072e-7, 3.1415096753083764e-9, -1.0775206439961742e-8, 4.5985121539299636e-9, -1.4519906359513705e-9, 3.966393400156687e-10, -9.765522365522736e-11, 2.164188143594026e-11, -4.118806559202446e-12, 5.520097021932821e-13, 2.264423767616408e-14, -5.713769603337633e-14, 3.02572898752244e-14, -1.2446241112891025e-14, 4.614985656532519e-15, -1.5731070118913808e-15, 5.271708122166285e-16, -1.7327968235224999e-16, 4.451655932568812e-17, -2.902086040096128e-17, 8.359859001186228e-18, 6.451146270325979e-18, 6.440716905677992e-18),
    (2.4738679504040218e-8, 7.728391018665427e-9, 3.88701777740044e-8, -2.0460553215120488e-8, -1.1817329771245419e-8, 7.241688037051369e-9, -1.7155722823465558e-9, 1.9923947361533764e-10, 3.7022918725530716e-11, -3.4659405307629587e-11, 1.5352546453035228e-11, -5.494462359871798e-12, 1.7649672375636938e-12, -5.293957757923059e-13, 1.5097805653621428e-13, -4.130665860957154e-14, 1.085782229700004e-14, -2.7364147887051994e-15, 6.627103124376634e-16, -1.3843087080567538e-16, 3.172877450862326e-17, -1.4248896832679438e-18, -4.153467322569149e-18, 3.807714989137999e-18, -9.940908981737584e-18, -9.199026487367498e-18, 1.8681637433596385e-19),
    (1.7051692033330734e-10, 1.1052607259037711e-9, 6.482789678087587e-10, 2.7123922906433183e-9, -1.4727204285969198e-9, -2.5281010157681398e-11, 1.9483017000833306e-10, -8.782306986486308e-11, 2.6712236225731316e-11, -6.4111599569513806e-12, 1.1733002734298383e-12, -9.95211281497425e-14, -4.39371907203124e-14, 3.29925679013266e-14, -1.4876012194650757e-14, 5.662757712401122e-15, -1.9639152226746856e-15, 6.543064544440777e-16, -1.7293930530568218e-16, 8.199138167884691e-17, -1.5806909960429748e-17, 1.1793109914531803e-17, 4.057928521756919e-18, 9.280435584085882e-18, -4.159374019951652e-18, 1.1130410245100452e-17, 4.111906239290538e-18),
    (-1.0805669863703648e-10, 3.6383613336842104e-11, -1.4706827817158855e-10, 8.434320297854063e-11, 1.0144464438930892e-10, -7.309760345536643e-11, 1.784884506484297e-11, -2.8987887833453103e-13, -1.6167444088680472e-12, 8.84826337361222e-13, -3.3509368417750477e-13, 1.0665896329222308e-13, -3.019930881288146e-14, 7.671628555384694e-15, -1.7360152245815336e-15, 3.3668048256515867e-16, -2.873295124990914e-17, 9.526652298759598e-18, 2.2689470666230566e-17, -6.1482851870462394e-18, -5.630533359424898e-18, -5.63862419794538e-17, -4.2295988373013694e-18, 1.4950995299211596e-17, -1.8991558313576917e-17, -2.27922270601108e-17, -1.4379769938668284e-17),
    (2.503549362834974e-12, -1.181901282956065e-11, 4.407020399708394e-12, -1.4870608268742123e-11, 7.839878828003235e-12, 1.3680219436458976e-12, -2.289391112648892e-12, 9.944211182407356e-13, -2.678603870980307e-13, 4.368199271248649e-14, 1.8863488646281237e-15, -5.178122505746711e-15, 2.7851372583202144e-15, -1.1434537864617675e-15, 4.219995973163073e-16, -1.1633997421403662e-16, 3.019690870664821e-17, -8.996201111123233e-19, 7.055493559144116e-18, 1.6447111922513314e-18, 1.873227596841654e-17, 3.0950155429022152e-18, 1.5508563609844542e-17, -1.3439056527142499e-17, -6.8020367663068996e-18, -1.0133428028297478e-17, -3.5499802383233306e-18),
    (2.390847432593256e-13, 1.1919671068904072e-15, 1.652075581469656e-13, 8.480320260392708e-14, -7.283556947903955e-13, 4.602345440697959e-13, -8.486224800807037e-14, -2.873484743321521e-14, 2.6822402598054056e-14, -1.1780446600091064e-14, 3.834357997104131e-15, -1.019432210971003e-15, 1.9858693177940113e-16, -3.344141675871387e-17, -1.5289875339819445e-17, 7.95588759378478e-18, 2.0692911435131754e-17, 1.9856406888060246e-17, 1.3445630132166403e-17, -4.834732656043184e-18, 6.047152598045991e-18, -4.540364280959154e-17, -4.276619225596537e-18, 3.385348402128075e-17, -2.4712580954735753e-18, 2.2284863678383698e-17, 1.1824076067660384e-17),
    (-2.1963653351982403e-14, 6.128478464243049e-14, -3.504716461379672e-14, 5.2365984563651194e-14, -1.627952846419368e-14, -1.9918359836185192e-14, 1.7696149812711426e-14, -6.6720342453046996e-15, 1.2577811044004563e-15, 1.1006361421417251e-16, -2.0223893856612888e-16, 1.2313740492571656e-16, -4.495870022557241e-17, -2.8111416328649797e-18, 3.6633628741482947e-19, 1.3730180129571521e-17, 4.785427870159053e-18, -2.729543627403285e-18, -7.242224782777237e-18, 1.979848872072566e-17, 4.060562434644137e-18, -3.251563719688213e-18, 5.009387825238775e-18, 1.0246543557650674e-17, 4.924987181493826e-18, -2.5419852254222297e-17, -7.606929242492527e-18),
    (5.527629636066404e-16, -2.336292776171231e-15, 1.960724782371493e-15, -2.5082992270612516e-15, 3.539772192868193e-15, -1.6619873402363456e-15, -7.349027703035379e-17, 4.176728510149206e-16, -2.4218936946869273e-16, 8.478214152914069e-17, -2.2598386266467968e-17, 1.6348477342118118e-17, 1.3743065179211517e-17, 5.8357876935424896e-18, -9.684065437971539e-18, -1.3733393608001184e-17, 5.060032636204154e-18, 1.437575244506103e-17, 4.064286127203368e-19, -4.1579567231913145e-18, 9.0169284755711e-18, 1.0769333658899423e-17, 8.250499983550533e-18, 1.2998783548479339e-20, 4.839215329356997e-18, 7.224593972574507e-18, -1.2098584242710039e-18)
)

# Chebyshev coefficients for low orders and medium arguments nu ∈ (0, 2), x ∈ (21, 36)
#=
using ArbNumerics, FastChebInterp
g(x) = struveh_power_series(BigFloat(x[1]), BigFloat(x[2])) - bessely(ArbFloat(BigFloat(x[1])), ArbFloat(BigFloat(x[2])))
lb, ub = [0,21], [2, 36]; # lower and upper bounds of the domain, respectively
x = chebpoints((15,15), lb, ub);
c = chebinterp(g.(x), lb, ub);
map(i->tuple(c.coefs[i,:]...), 1:size(c.coefs)[1])
=#
const struvek_cheb_weights_medium_args = (
    (1.7740551174812966, 0.3486167277615892, -0.0022699981201092572, 7.330205975395933e-5, 3.9618221734073334e-8, -6.149006917891692e-7, 1.280726983972379e-7, -2.1037377762761268e-8, 3.1788221907460574e-9, -4.6177236034949944e-10, 6.564559858508586e-11, -9.211369125625802e-12, 1.2819028995990572e-12, -1.7745483763228501e-13, 2.4812712010327285e-14, -3.3237610195000243e-15),
    (2.6650405438677147, 0.6218761702558941, -0.004705771291838093, 0.0002844434004686324, -2.2934042908478224e-5, 2.0902551863609614e-6, -2.023190914893638e-7, 2.0121261997429026e-8, -2.0093353347984707e-9, 1.971028839833602e-10, -1.8438252660790688e-11, 1.5542622596216812e-12, -9.953684975497663e-14, 1.5594272593911897e-16, 1.824944516491832e-15, -4.894849957458468e-16),
    (1.20400561828835, 0.3939267822185376, 0.00015984766468728003, -5.209574125283391e-5, 6.975483257863819e-6, -8.860660273886888e-7, 1.1238319818205156e-7, -1.43377686056352e-8, 1.8411421630496727e-9, -2.3784176521786845e-10, 3.0889645408716046e-11, -4.031200350803e-12, 5.284153724919131e-13, -6.955920443711066e-14, 9.274006861456322e-15, -1.247397247223287e-15),
    (0.3498269744199223, 0.16517612008522298, 0.0037027084742328655, -0.0002678046562904226, 2.3760748875554866e-5, -2.3269458273971145e-6, 2.4121226910985186e-7, -2.5927460742532285e-8, 2.856775047798472e-9, -3.204162358432732e-10, 3.641854250653455e-11, -4.182033328397188e-12, 4.841203268949153e-13, -5.644879547157579e-14, 6.6881743199243e-15, -8.131766864810036e-16),
    (0.06825400712325885, 0.04592544570862134, 0.0027315999221817905, -0.00013812214644795697, 8.893835814450046e-6, -6.207246969244728e-7, 4.296223218132498e-8, -2.6276667439057883e-9, 9.294612319864535e-11, 9.857962571246936e-12, -3.2841206837330715e-12, 6.140369653832585e-13, -9.755123570729929e-14, 1.4420243127000343e-14, -2.0525412002752535e-15, 2.6003890398998113e-16),
    (0.009098953529497631, 0.008586132925850549, 0.0009872258677182404, -2.1847324042459264e-5, -9.434163172042423e-8, 1.2251277346041577e-7, -1.995668193507959e-8, 2.64247780949639e-9, -3.2583131528824925e-10, 3.8864031331480187e-11, -4.5487727032419686e-12, 5.256146718076317e-13, -6.011543402393196e-14, 6.782078711444892e-15, -7.713541862473246e-16, 1.1780699872411383e-16),
    (0.0008157949903832515, 0.0010742799766062774, 0.00021365334285557388, 3.7207981711695847e-6, -7.043327723090685e-7, 7.187653790893338e-8, -6.51580068849552e-9, 5.482097523846084e-10, -4.150248793679212e-11, 2.4698604448780847e-12, -3.4072961014429645e-14, -2.3775078892365603e-14, 5.8053453316262474e-15, -1.013344894303185e-15, 1.7899711058466969e-16, -5.063079585217641e-17),
    (4.495056077282491e-5, 8.514155214214913e-5, 2.9142057203434924e-5, 2.222734886636855e-6, -1.5240168495411748e-7, 6.663660136459693e-9, 5.747255550885254e-11, -6.788620551108275e-11, 1.2390596657661598e-11, -1.764174083872481e-12, 2.266846424804808e-13, -2.7485708172364648e-14, 3.188416178339076e-15, -4.023543474096975e-16, 3.1866162510609127e-17, 3.30869590984643e-17),
    (9.035068034923204e-7, 3.3333675123241943e-6, 2.407735472165483e-6, 4.327154748813448e-7, -5.135275899641261e-9, -1.4716532784990275e-9, 2.347041931613139e-10, -2.6024012140334138e-11, 2.44915902664279e-12, -1.965175588688835e-13, 1.1666470196402515e-14, 2.0533623711890458e-17, -1.9124880136274986e-16, 1.3709812998153119e-17, 1.5092973743541787e-17, 1.27675647831893e-17),
    (-6.738530825679668e-8, -6.334254031989733e-8, 8.984100551456584e-8, 4.42629142026281e-8, 2.870464895074887e-9, -3.68080588231123e-10, 2.4124659909132725e-11, -5.043086786479507e-13, -1.5833828712389857e-13, 3.6830203257865876e-14, -5.783028372452855e-15, 7.866936879743116e-16, -4.649107989486317e-17, -3.620131613346525e-19, 2.2742285709370756e-17, 2.960594732333751e-17),
    (-6.085501345373976e-9, -1.3896840548709252e-8, -3.0336156840723246e-9, 2.0571782094372386e-9, 5.315584329430742e-10, -1.7419547717858558e-11, -2.173212447007636e-12, 4.76476202497255e-13, -5.949406842145989e-14, 5.8009250174873395e-15, -4.804181742457258e-16, 1.6351203826156594e-17, 2.2362330866822297e-17, -3.3097918326626965e-17, 3.501612356087303e-17, 1.7085098767842686e-17),
    (-1.54252966657547e-10, -4.706023443675848e-10, -4.82244240927469e-10, -4.272348457183455e-11, 3.7450784233286204e-11, 3.171859372375065e-12, -5.427478504185569e-13, 4.094911464538001e-14, -7.493485375636101e-16, -3.56212796329616e-16, 2.2744152369257343e-18, -4.708808266212336e-17, -2.0595510226745682e-17, 2.0499035812874458e-17, 2.3747042981637547e-18, 1.0061396160665481e-17),
    (5.669760035572678e-12, 1.4757147313105113e-11, -1.2901327665340452e-11, -1.022778316080892e-11, 1.6436234680363092e-13, 4.815957514147269e-13, -1.7612166697713362e-14, -3.2408149820845525e-15, 7.519377013994802e-16, -8.881170090026505e-17, -1.5270385263553786e-18, 9.923614348866605e-19, 5.306355916845737e-18, -6.141545954186909e-17, 4.0772385436760713e-17, 1.1160415762841621e-17),
    (5.441934865698291e-13, 1.3778136502803105e-12, 7.917778169699599e-13, -3.271164698252886e-13, -1.4581491141865577e-13, 1.695140170207866e-14, 3.533692137086208e-15, -5.00646831935372e-16, 7.704351262396192e-17, 2.1243920383219128e-17, -3.555026643438009e-17, -6.529810061973417e-17, -6.66892177631927e-17, -8.249477420175478e-17, -1.5426606580914805e-17, -2.6861229290236425e-17),
    (9.206709468874881e-15, 5.690978688441554e-15, 5.1872738989448566e-14, 1.7194853342475276e-14, -7.0260835853979954e-15, -1.2583144402987678e-15, 3.16536791071736e-16, -2.856597811233904e-17, -3.538432035058481e-17, 2.0819988874712057e-17, -5.2735593669696505e-17, -6.520388614627604e-17, -7.709753055171665e-18, -1.1491750123005988e-17, 1.6759093102277564e-17, 2.3931474086364485e-17),
    (-8.511709855459534e-16, -2.068265550429468e-15, -4.91518836663156e-16, 1.3061649376101065e-15, 2.0351201917033771e-16, -1.2138438402568387e-16, -1.1753393375841828e-17, -1.5711332310803888e-17, 1.933760455904443e-17, 1.5247177921524365e-17, 8.881784197001239e-18, -3.451818390477856e-17, -2.2786878501385263e-17, -3.484416867236407e-17, -3.133771994271284e-17, -1.4802973661668755e-18)   
)

function struvek_up_recurrence(x::T, knu, knum1, nu_start, nu_end) where T
    x_2 = x / 2
    two_x = 2 / x
    c = x_2^nu_start / (sqrt(π) * gamma(nu_start + T(3)/2)) 
    while nu_start < nu_end + 0.5 # avoid inexact floating points when nu isa float
        knum1, knu = knu, muladd(nu_start*two_x, knu, c - knum1)
        c *= x_2 / (nu_start + T(3)/2)
        nu_start += 1
    end
    return knum1, knu
end
