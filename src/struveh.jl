#              Struve Functions of first and second kind
#                     struveh(v, x), struvek(v, x)
#
# The Struve function is computed from its power series [1] for small arguments.
# Large arguments are computed from the asymptotic expansions for struvek(v, x) [2].
# Connection formula using bessely(v, x) [3] are used to compute struveh(v, x) from struvek(v, x) and conversely (struvek -> struveh).
# The power series form [1] can only be used for small x and when nu > x otherwise significant cancellation occurs.
# There is a region where the large argument expansion is not valid and where the power series is prone to cancellation.
# In this region we fall back to computing struvek(v, x) from its integral representation [4] using adaptive gaussian integration (QuadGK.jl).
# TODO: Use a different algorithm in this region instead of relying on quadgk that is more efficient and doesn't allocate.
#
# [1] http://dlmf.nist.gov/11.2.E1
# [2] http://dlmf.nist.gov/11.6.E1
# [3] http://dlmf.nist.gov/11.2.E5
# [4] http://dlmf.nist.gov/11.5.E2
#

"""
struveh(nu, x)

Struve function of the first kind of order `nu`.

External links: [DLMF](http://dlmf.nist.gov/11.2.E1), [Wikipedia](https://en.wikipedia.org/wiki/Struve_function)
"""
struveh(v::Real, x::Real) = _struveh(float(v), float(x))
struveh(v, x) = _H_integral(v, x)

_struveh(v, x::AbstractFloat) = _H_integral(v, x)
_struveh(v::Float16, x::Float16) = Float16(_struveh(Float32(v), Float32(x)))

function _struveh(v, x::T) where T <: Union{Float32, Float64}
    if struvek_large_arg_cutoff(v, x)
        # use http://dlmf.nist.gov/11.2.E6
        return struvek_large_argument(v, x) + bessely(v, x)
    elseif struveh_power_series_cutoff(v, x)
        return struveh_power_series(v, x)
    else
        return _H_integral(v, x)
    end
end

"""
struvek(nu, x)

Struve function of the second kind of order `nu`.

External links: [DLMF](http://dlmf.nist.gov/11.2.E5), [Wikipedia](https://en.wikipedia.org/wiki/Struve_function)
"""
struvek(v::Real, x::Real) = _struvek(float(v), float(x))
struvek(v, x) = _K_integral(v, x)

_struvek(v, x::AbstractFloat) = _K_integral(v, x)
_struvek(v::Float16, x::Float16) = Float16(_struvek(Float32(v), Float32(x)))

function _struvek(v::Real, x::T) where T <: Union{Float32, Float64}
    if struvek_large_arg_cutoff(v, x)
        return struvek_large_argument(v, x)
    elseif struveh_power_series_cutoff(v, x)
        return struveh_power_series(v, x) - bessely(v, x)
    else
        return _K_integral(v, x)
    end
end

# H_{nu}(x) Struve function power series
# http://dlmf.nist.gov/11.2.E1
# can use for x < 5 || nu > -0.75 + 0.41x + 0.023x^2
# struve H can be computed with forward recurrence only when x < nu
# backward recurrence may be stable always?
function struveh_power_series(v, x::T) where T
    MaxIter = 50000
    S = promote_type(T, Float64)
    v, x = S(v), S(x)
    out = zero(S)
    three_halves = S(3) / 2

    a = (x/2)^(v+1)
    (isinf(a) || gamma_max(v)) && return T(log_struveh_power_series(v, x))
    a /= gamma(v + three_halves) * gamma(three_halves)
    iszero(a) && return a

    t2 = (x/2)^2
    for i in 0:MaxIter
        out += a
        abs(a) < eps(T) * abs(out) && break
        a *= -inv((v + i + three_halves) * (i + three_halves)) * t2
    end
    return T(out)
end
function log_struveh_power_series(v, x::T) where T
    MaxIter = 10000
    out = zero(T)
    three_halves = T(3) / 2
    a = x / 2 
    t2 = a*a
    for i in 0:MaxIter
        out += a
        abs(a) < eps(T) * abs(out) && break
        a *= -inv((v + i + three_halves) * (i + three_halves)) * t2
    end
    return exp(v*log(x/2) + log(out) - loggamma(v + three_halves) - loggamma(three_halves))
end
struveh_power_series_cutoff(nu, x::Float64) = x < 6 || nu > evalpoly(x, (-0.75, 0.41, 0.023))
struveh_power_series_cutoff(nu, x::Float32) = x < 26 || nu > evalpoly(x, (-10.0f0, 0.1f0, 0.012f0))

# K_{nu}(x) using large argument expansion
# http://dlmf.nist.gov/11.6.E1
function struvek_large_argument(v, x::T) where T
    MaxIter = 50000
    S = promote_type(T, Float64)
    v, x = S(v), S(x)
    out = zero(S)
    one_half = one(S) / 2

    a = (x/2)^(v-1)
    (isinf(a) || gamma_max(v)) && return T(log_struvek_large_argument(v, x))
    a *= gamma(one_half) / gamma(v + one_half)
    iszero(a) && return a

    t2 = (x/2)^(-2)
    for i in 0:MaxIter
        out += a
        abs(a) < eps(T) * abs(out) && break
        a *= (i + one_half) * t2 * (v - one_half - i)
    end
    return T(out / π)
end

function log_struvek_large_argument(v, x::T) where T
    MaxIter = 50000
    out = zero(T)
    one_half = one(T) / 2
    a = 2 / x
    iszero(a) && return a
    t2 = a*a
    for i in 0:MaxIter
        out += a
        abs(a) < eps(T) * abs(out) && break
        a *= (i + one_half) * t2 * (v - one_half - i)
    end
    return exp(log(out / π) + loggamma(one_half) - loggamma(v + one_half) + v*log(x/2)) 
end

struvek_large_arg_cutoff(nu, x) = x > 39 && nu < 1.23*x - 35
struvek_large_arg_cutoff(nu, x::Float32) = x > 17 && nu < 1.23*x - 23

#####
#####  Chebyshev approximation for struvek_{nu}(x)
#####

"""
    struvek_chebyshev(nu, x::T) where T <: Float64
Computes ``struvek_{nu}(x)`` for small to medium arguments x ∈ (6, 36) for any positive order using a Chebyshev approximation.
Forward recurrence is used to fill orders starting at low orders ν ∈ (0, 2). Two sets of Chebyshev coefficients are used for
x ∈ (6, 21) and for x ∈ (21, 36).
"""
function struvek_chebyshev(v, x)
    v_floor, _ = modf(v)
    k0, k1 = struvek_chebyshev_low_orders(v_floor, x)
    return struvek_up_recurrence(x, k1, k0, v_floor + 1, v)
end

# only implemented for Float64 so far
struvek_chebyshev_cutoff(::Number, x) = (x <= 38.0 && x >= 6.0)

# compute struvek for x ∈ (6, 38) and ν ∈ (0, 2) using chebyshev approximation in three regions
# optimized to return both (ν, ν + 1) in around the same time, therefore ν must be in (0, 1)
# no checks are performed on arguments
function struvek_chebyshev_low_orders(v, x)
    # need to rescale inputs according to
    #x0 = (x - lb) * 2 / (ub - lb) - 1
    v1 = v - 1
    v2 = v
    if x <= 12
        x1 = (x - 6) * 2 / 6 - 1
        P = clenshaw_chebyshev.(x1, struvek_cheb_weights_branch1)
        return clenshaw_chebyshev(v1, P), clenshaw_chebyshev(v2, P)
    elseif x <= 21
        x1 = (x - 12) * 2 / 9 - 1
        P2 = clenshaw_chebyshev.(x1, struvek_cheb_weights_branch2)
        return clenshaw_chebyshev(v1, P2), clenshaw_chebyshev(v2, P2)
    else
        x1 = (x - 21) * 2 / 17 - 1
        P3 = clenshaw_chebyshev.(x1, struvek_cheb_weights_branch3)
        return clenshaw_chebyshev(v1, P3), clenshaw_chebyshev(v2, P3)
    end
end

# uses the Clenshaw algorithm to recursively evaluate a linear combination of Chebyshev polynomials
function clenshaw_chebyshev(x, c)
    x2 = 2x
    c0 = c[end-1]
    c1 = c[end]
    for i in length(c)-2:-1:1
        c0, c1 = c[i] - c1, c0 + c1 * x2
    end
    return c0 + c1 * x
end

# Chebyshev coefficients for low orders and small arguments nu ∈ (0, 2), x ∈ (6, 12)
#=
using ArbNumerics, FastChebInterp
g(x) = struveh_power_series(BigFloat(x[1]), BigFloat(x[2])) - bessely(ArbFloat(BigFloat(x[1])), ArbFloat(BigFloat(x[2])))
lb, ub = [0,6], [2, 12]; # lower and upper bounds of the domain, respectively
x = chebpoints((15,18), lb, ub);
c = chebinterp(g.(x), lb, ub);
map(i->tuple(c.coefs[i,:]...), 1:size(c.coefs)[1])
=#
const struvek_cheb_weights_branch1 = (
    (0.8414037738679299, 0.14317176935040615, 0.0019505115785243532, -0.0005691582221003979, 0.00011414462507084262, -2.141715827764053e-5, 3.928056373983627e-6, -7.129126546948245e-7, 1.286264900503637e-7, -2.311782654689725e-8, 4.143186976718107e-9, -7.408746725469307e-10, 1.3223073993786884e-10, -2.356141390069198e-11, 4.192050321711585e-12, -7.448497580037278e-13, 1.3232707111135957e-13, -2.417490076435637e-14, 4.157990824077623e-15),
    (0.9547096033961995, 0.28861404449263034, -0.0032673414121821625, 0.00014781075728455736, 8.83567435808672e-6, -5.727180361953503e-6, 1.5927578130740753e-6, -3.6837911941122645e-7, 7.855852310661183e-8, -1.6002446439560773e-8, 3.1645533843759707e-9, -6.129024065678706e-10, 1.1687964834655522e-10, -2.202284490157776e-11, 4.110060834216697e-12, -7.610689727609875e-13, 1.4019557120153396e-13, -2.6447979608848174e-14, 4.710635174113257e-15),
    (0.19274534532054857, 0.14864106919743877, 0.0017012688968629608, -0.0002764872060537484, 4.544249851057666e-5, -7.726636721542653e-6, 1.3506857056745082e-6, -2.411153699621416e-7, 4.369322457957086e-8, -7.997643281788248e-9, 1.4728650399854992e-9, -2.721049892776596e-10, 5.0322689225544716e-11, -9.30271115657672e-12, 1.7173643442761686e-12, -3.164315774427127e-13, 5.82232307634035e-14, -1.1019991503686738e-14, 1.9605716227454615e-15),
    (0.0025874393078261547, 0.028195280261165356, 0.003906483781776456, -0.00035366913180259795, 3.778838440024789e-5, -4.388673531317863e-6, 5.423687993432057e-7, -7.134544490556748e-8, 1.0074025750294606e-8, -1.537403620871308e-9, 2.5306131712779807e-10, -4.437626248935845e-11, 8.143417216275482e-12, -1.536986022392129e-12, 2.943822551715542e-13, -5.670751933871964e-14, 1.0927267321444897e-14, -2.1743923534140103e-15, 3.945917666688577e-16),
    (-0.003042846141870137, -0.0003338360999496057, 0.0011457287377530164, -1.3062753141345805e-5, -5.562318921977263e-6, 1.31789702795212e-6, -2.318321127052029e-7, 3.697844179276834e-8, -5.606378064771359e-9, 8.193868396031999e-10, -1.1555567279556729e-10, 1.5590075924495412e-11, -1.967823435064828e-12, 2.1998985777603905e-13, -1.8126911889855663e-14, -1.753347659961947e-16, 5.780612614095752e-16, -2.0825034084013425e-16, 4.5950897408096754e-17),
    (-0.00010633338599974852, -0.0005759999096383057, 2.2540836623484335e-5, 2.895709521844765e-5, -3.735724321593328e-6, 3.8480851698695975e-7, -3.199478010023308e-8, 1.3007272397271832e-9, 2.811167271911154e-10, -1.0849517846633905e-10, 2.5813978002826575e-11, -5.295045590915662e-12, 1.0145778507454473e-12, -1.8752009653499358e-13, 3.396698141102735e-14, -6.1185977837827806e-15, 1.0665176303831853e-15, -1.9914625504213745e-16, 2.5127790794612196e-17),
    (2.8912643703330436e-5, -1.0208414039982949e-5, -2.3992888111514224e-5, 3.098624368056638e-6, 2.3345709468366125e-7, -9.395473444433735e-8, 1.8333649021822243e-8, -2.978113074160245e-9, 4.4401516928352756e-10, -6.276304894640289e-11, 8.514388687492209e-12, -1.111943777175078e-12, 1.3938317771057787e-13, -1.6621754104581202e-14, 1.8535956412416966e-15, -1.7556505856875782e-16, 4.144141948327742e-17, 1.8999036847367745e-17, 1.41275558638463e-17),
    (3.160146461539015e-7, 6.770385748705868e-6, -8.84767391499818e-7, -5.870192695164897e-7, 1.3621795000137387e-7, -1.3786509918873852e-8, 5.391485594185784e-10, 1.4921804027008386e-10, -5.330580799979856e-11, 1.1953069263548332e-11, -2.283837219591695e-12, 4.016326998861076e-13, -6.705821597596395e-14, 1.0782537748338806e-14, -1.6757284475630905e-15, 2.599118716354382e-16, -4.6478743243553127e-17, -3.518035271535372e-18, 8.954706832009907e-19),
    (-1.8324973754750047e-7, 1.527920058365505e-8, 3.072817171653234e-7, -5.7689358307697896e-8, -5.465658791102753e-9, 3.0251854538909887e-9, -6.077545710133883e-10, 9.16226778359545e-11, -1.1441149112745778e-11, 1.1333350410410767e-12, -5.888594708106496e-14, -1.0261363650414336e-14, 4.633703400404567e-15, -1.2013698007509953e-15, 2.7636940656890314e-16, -5.684453167387116e-17, 1.1680270626730411e-17, 7.266295274569112e-18, 1.2721305490496584e-18),
    (6.243968255457977e-9, -5.515275815718242e-8, 4.897411965563784e-9, 8.401174409777174e-9, -2.2571484881455044e-9, 2.0180695904341714e-10, 1.5611046650335596e-11, -9.670196237548094e-12, 2.38053600102002e-12, -4.581589223233378e-13, 7.770257566927765e-14, -1.210558117921416e-14, 1.7467123426663358e-15, -2.5063322770167584e-16, 3.233423983894695e-17, -9.386480308293255e-18, -8.121256312959003e-18, -7.700762394053705e-18, 4.979298866229724e-18),
    (4.5031176467261745e-10, 1.5440100694026544e-9, -2.7785920427438995e-9, 4.4923735421202444e-10, 1.2539207359888315e-10, -5.504494823035031e-11, 1.0409288287937051e-11, -1.273945078172784e-12, 7.886114913796261e-14, 1.1390216830419885e-14, -5.664581882067974e-15, 1.4585341486788097e-15, -2.9946788361858134e-16, 5.986898848095804e-17, -1.0779901093904798e-17, 3.8523514799733155e-18, -5.143170232620986e-18, 2.911285572028084e-18, 5.6298201697210265e-18),
    (-6.24968281801273e-11, 2.7725542548971617e-10, 4.5790645604887515e-11, -8.759880441745886e-11, 2.062243625435878e-11, -5.743238657506244e-13, -7.059848613592501e-13, 2.270741582933742e-13, -4.636704878325907e-14, 7.525693232492497e-15, -1.022640649524495e-15, 1.0098355864281444e-16, 9.603722299150536e-18, -8.049164342414597e-18, 1.3166571855322776e-17, -7.619333901246108e-18, -6.166120917688318e-18, -1.2488749261596412e-17, -2.6369202282108097e-18),
    (3.1215770567997312e-12, -1.9076246746191166e-11, 1.6240192219554057e-11, -5.690581915776475e-13, -1.829595954435418e-12, 5.97403697167055e-13, -9.048878057731838e-14, 4.150119389554837e-15, 1.8753871316450744e-15, -7.238332473911517e-16, 1.9699368113265635e-16, -4.0919510883148707e-17, 8.197271147620728e-18, -1.0446084930094262e-17, -4.690549795139961e-18, -1.794425232681166e-17, 1.0804690664772471e-17, 5.827719561760223e-18, -4.26006123060265e-18),
    (1.2480870015870587e-13, -5.056383831724078e-13, -8.61438505976208e-13, 5.963754729496639e-13, -8.929401312194873e-14, -1.9522344084558006e-14, 1.124444755494374e-14, -2.6879337850027665e-15, 4.3664431403764185e-16, -4.2038734569044894e-17, -2.7072897179807766e-18, 4.120488838006777e-18, 5.820659829896484e-18, 1.4435990687233315e-17, 6.5411179648065425e-18, 3.841737526351985e-18, 3.569875182552813e-18, 1.8291657053143335e-18, 2.923029134838929e-18),
    (-2.939253618015634e-14, 1.0407663361160601e-13, -4.7140004364555376e-14, -1.9432639796863764e-14, 1.5568632820767158e-14, -3.638457612387882e-15, 2.2053154055987376e-16, 8.838014903477148e-17, -6.494403193841361e-17, -9.537766666991001e-18, 5.449645376548901e-18, 1.0604041859680771e-17, 2.8009359235262556e-17, 1.2880747823202199e-17, -2.9224585439973445e-18, -4.007708117712367e-19, -1.7275772204233778e-18, 1.406689189475388e-19, 4.65966000352659e-18),
    (1.2782984547420206e-15, -2.90010071787261e-15, 5.791364714104922e-15, -2.2597648189193838e-15, -1.1591481006278994e-16, 2.764816107895135e-16, -9.49857476623745e-17, 1.2433872154253724e-17, -3.756235919016888e-18, 6.784696261598179e-18, 2.4096000721831817e-18, -4.564489374368292e-18, -8.635067969306773e-18, -3.879870215541777e-18, -3.961240756914403e-18, 1.2179984622678339e-17, 5.564790673110196e-18, 3.2039998188005063e-18, 5.2427198385076835e-18)
)

# Chebyshev coefficients for low orders and medium arguments nu ∈ (0, 2), x ∈ (12, 21)
#=
using ArbNumerics, FastChebInterp
g(x) = struveh_power_series(BigFloat(x[1]), BigFloat(x[2])) - bessely(ArbFloat(BigFloat(x[1])), ArbFloat(BigFloat(x[2])))
lb, ub = [0,12], [2, 21]; # lower and upper bounds of the domain, respectively
x = chebpoints((15,15), lb, ub);
c = chebinterp(g.(x), lb, ub);
map(i->tuple(c.coefs[i,:]...), 1:size(c.coefs)[1])
=#
const struvek_cheb_weights_branch2 = (
    (1.2053641958978805, 0.21858775256444055, -0.0008071349642947431, -6.330378806153092e-5, 1.6899870041893452e-5, -2.905434708340571e-6, 4.5161875732692937e-7, -6.753231584033626e-8, 9.912404487386139e-9, -1.4401721646374137e-9, 2.0795672937622443e-10, -2.9908090092571307e-11, 4.289528244474937e-12, -6.141747922353311e-13, 8.958161469563298e-14, -1.252134198795021e-14),
    (1.6427710865468377, 0.3987450735763923, -0.0035748800401840895, 0.0002237391306850869, -1.739995180663178e-5, 1.3821330801754747e-6, -9.481019830524217e-8, 2.7563118500788685e-9, 8.31263939351219e-10, -2.6498519141283773e-10, 5.589032834968443e-11, -1.025679366532584e-11, 1.7554981099114125e-12, -2.884757014789847e-13, 4.711387289175873e-14, -7.231746066180574e-15),
    (0.5759478567056728, 0.2338176432025742, 0.000614444087832812, -9.170432783425028e-5, 1.1903503283346241e-5, -1.5550253221045136e-6, 2.060873537125409e-7, -2.7681837918601408e-8, 3.7628420999084556e-9, -5.169548985720393e-10, 7.169826217543613e-11, -1.0028020853240801e-11, 1.412930263240686e-12, -2.004053895609128e-13, 2.9212206053039514e-14, -4.087594460442132e-15),
    (0.10823044284275866, 0.0773876757751229, 0.003255426761361053, -0.0002462592475363729, 2.2463676304718243e-5, -2.2351388039375798e-6, 2.3352284942401482e-7, -2.5167574409514007e-8, 2.772553086154073e-9, -3.1074340608388477e-10, 3.5359164998942214e-11, -4.083547538260121e-12, 4.79084515129861e-13, -5.725956288012917e-14, 7.040871550913054e-15, -8.90152149521681e-16),
    (0.009732666952917447, 0.013802775700677145, 0.0017437105599074363, -7.456927940939183e-5, 3.3333185187472965e-6, -5.886152285050223e-8, -1.8436702792283533e-8, 4.396452301864158e-9, -7.33464453352671e-10, 1.0881539844341691e-10, -1.5266428506072914e-11, 2.0748994036079595e-12, -2.7632741975171135e-13, 3.6305831420124395e-14, -4.76440200467153e-15, 6.117328865684612e-16),
    (5.291053818760142e-5, 0.0010723509440241136, 0.0003926018532849826, 5.347353203318501e-6, -1.7665347252629138e-6, 2.3411162217761937e-7, -2.694936493984496e-8, 2.93556226204278e-9, -3.0819777932846347e-10, 3.1154999749502376e-11, -2.9912126754104893e-12, 2.637309527213679e-13, -1.9470316026269192e-14, 7.632715682245806e-16, 9.512826001460232e-17, -4.249687022037405e-17),
    (-6.142472263821507e-5, -2.9387028314076136e-5, 3.621705482406745e-5, 5.709454551166416e-6, -4.772572545499079e-7, 2.7316911586267505e-8, -4.011084313943362e-10, -2.2003007464903547e-10, 5.175573224079228e-11, -8.653599764810788e-12, 1.2775219425956982e-12, -1.7691729847632548e-13, 2.3606296590784354e-14, -3.02839312890398e-15, 4.072947160142396e-16, -7.374020375798077e-17),
    (-3.180771796639063e-6, -1.0449160016815358e-5, -6.770311547997862e-7, 8.727848062169315e-7, 1.016183610196933e-8, -7.625309051253184e-9, 1.1740429321141692e-9, -1.4053358316934415e-10, 1.477639837608737e-11, -1.3790668018591275e-12, 1.0722001315396168e-13, -4.996613839700543e-15, -4.1446446215988693e-16, 2.0129709239435626e-16, -4.079460175291901e-17, 1.1533019909452473e-17),
    (1.5933496660127759e-7, -2.8103376857734595e-7, -3.627568128295826e-7, 1.3907888206142129e-8, 1.3568179758515518e-8, -1.3266961444481988e-9, 6.240470853693752e-11, 4.348230025464646e-12, -1.7405919404159527e-12, 3.252614340248121e-13, -4.9477713608870964e-14, 6.804315734177935e-15, -8.716781752161209e-16, 1.2479865295740568e-16, -3.2216171582778115e-17, -1.3808398868775384e-17),
    (1.409184235745542e-8, 4.8710793209394746e-8, -1.1487766861764642e-8, -7.566359747894587e-9, 9.909898255137109e-10, 8.003158333578155e-11, -2.434897532990062e-11, 3.4587387025157546e-12, -3.7414847009412346e-13, 3.172944678976879e-14, -1.6016817492808222e-15, -1.0152143813386982e-16, 5.837314198690479e-17, -2.3557514260580467e-17, 2.3598975243975882e-18, -8.635067969306773e-18),
    (-2.3081926178262584e-10, 2.160417380437973e-9, 1.8284203464065743e-9, -4.227395785380133e-10, -9.022340919524993e-11, 2.3503496808904485e-11, -1.7417752574017122e-12, -3.785894573527244e-14, 3.461347990158838e-14, -7.109054452795733e-15, 1.1273794398393308e-15, -1.2097983394415373e-16, 1.1886137814842668e-17, 1.6924773118806212e-17, -3.0282671502819524e-18, 6.923474139676323e-18),
    (-2.825009149702207e-11, -1.7780591887009367e-10, 9.061441084801362e-11, 3.6928227856115254e-11, -1.1146040757258586e-11, -5.0268827728867415e-14, 2.7779433592403827e-13, -4.977718626359441e-14, 5.582109937657129e-15, -4.55216958059405e-16, 6.035633028237839e-18, -5.654068087155423e-18, 2.7199063585496873e-18, -8.964423401299683e-18, -3.957287553353697e-18, 3.721343256694413e-18),
    (1.9769198003394658e-14, -7.895726534519967e-12, -7.2587283934314714e-12, 2.8467385981244637e-12, 3.714324958449367e-13, -1.9669913746484065e-13, 2.1783566731907055e-14, 1.9146975112509332e-16, -4.611802670481266e-16, 7.656542877627188e-17, -5.578551461420708e-18, -2.2511202607804508e-17, 4.917461327655528e-18, 1.1766265859625214e-17, 1.8255365025642903e-17, 1.4527857360400558e-17),
    (-5.813749004782154e-15, 5.881739317681971e-13, -3.6807854063579333e-13, -1.503879056440511e-13, 6.6436705030685e-14, -2.0005777994862053e-15, -2.0214232369293095e-15, 4.478943688785556e-16, -6.158703442605632e-17, 2.314605859478781e-17, 4.218992053867055e-18, -3.916363979106048e-17, -2.5789832469625917e-17, -2.2830598027410365e-17, 2.884442987961546e-17, -8.236683904372377e-18),
    (2.1570255227038656e-15, 1.6826133983898277e-14, 2.6035773261166008e-14, -1.1674954475385227e-14, -1.4950415340213568e-15, 1.1109891941603803e-15, -1.523069018074063e-16, -3.5166223939740275e-18, 1.95588863076848e-17, -2.9042432234008205e-18, -1.8452639108069723e-17, -3.874999822383017e-17, -1.2938037837822191e-17, -1.872388455274343e-17, -5.3308889696484795e-18, -2.7379718862500606e-18),
    (1.722079269307465e-16, -1.7140509928992839e-15, 9.500336311793286e-16, 5.96780184705322e-16, -2.696631133838289e-16, 4.934324553889563e-18, 2.04361998262169e-17, -4.714966565015247e-18, 3.365285495884354e-19, -5.648103149349677e-18, -1.0855514018557107e-17, -2.2447153625879193e-18, 7.196017675564775e-18, 6.332892350256323e-18, 1.8486742941066055e-17, 8.388351741612294e-18)
)

# Chebyshev coefficients for low orders and medium arguments nu ∈ (0, 2), x ∈ (21, 38)
#=
using ArbNumerics, FastChebInterp
g(x) = struveh_power_series(BigFloat(x[1]), BigFloat(x[2])) - bessely(ArbFloat(BigFloat(x[1])), ArbFloat(BigFloat(x[2])))
lb, ub = [0,21], [2, 38]; # lower and upper bounds of the domain, respectively
x = chebpoints((15,16), lb, ub);
c = chebinterp(g.(x), lb, ub);
map(i->tuple(c.coefs[i,:]...), 1:size(c.coefs)[1])
=#
const struvek_cheb_weights_branch3 = (
    (1.8198566939432181, 0.39381366539542884, -0.0028419530142740337, 0.00010545215509708885, -8.523589631652556e-7, -8.698318303629638e-7, 2.0986257071390254e-7, -3.8505176869207955e-8, 6.4426547652374214e-9, -1.0328237968574663e-9, 1.6176541206095834e-10, -2.498548827686506e-11, 3.824754649359116e-12, -5.820229714847969e-13, 8.813944944267386e-14, -1.3796371452675279e-14, 2.1316282072803005e-15),
    (2.7466088463785017, 0.702246978894686, -0.005791231029239957, 0.000383899715371833, -3.4006775971961667e-5, 3.410986816156699e-6, -3.64031451133053e-7, 4.001636175014293e-8, -4.432446350695803e-9, 4.850461069831151e-10, -5.117020349110213e-11, 4.988777764734313e-12, -4.0413631281187766e-13, 1.5448377530905925e-14, 3.69565489322099e-15, -1.3618735768735254e-15, 4.736951571734001e-16),
    (1.2565540048504333, 0.44649704756667735, 0.00016302516231382147, -6.720134304103931e-5, 9.96616756261875e-6, -1.3938080874557788e-6, 1.9436484254180872e-7, -2.7250011632358925e-8, 3.844496158459757e-9, -5.455547199180917e-10, 7.782179218893357e-11, -1.1153339327050112e-11, 1.6054146781494665e-12, -2.321058637534216e-13, 3.357745216129674e-14, -4.973799150320701e-15, 7.105427357601002e-16),
    (0.37288918918307024, 0.18916056254306055, 0.0045209153781745485, -0.0003589446244334293, 3.498583720763428e-5, -3.765996571000957e-6, 4.2926871361784655e-7, -5.075248116215292e-8, 6.152348201264128e-9, -7.59317057378676e-10, 9.497966036349966e-11, -1.2004263107272725e-11, 1.529751159368616e-12, -1.963019156947521e-13, 2.5336214607799928e-14, -3.2862601528904635e-15, 4.736951571734001e-16),
    (0.0751731001591719, 0.05355121824632911, 0.0033823985547249136, -0.00018894647211552016, 1.3481387931607077e-5, -1.0477651294740055e-6, 8.15836565503288e-8, -5.777475803325771e-9, 2.8083949980365713e-10, 1.2869895889740708e-11, -7.177854144391205e-12, 1.5767655916464525e-12, -2.8313412270102035e-13, 4.656122131370862e-14, -7.345744383139656e-15, 1.1361282285330768e-15, -1.6283271027835628e-16),
    (0.010545865186900264, 0.010301453484477545, 0.0012457561289853406, -3.166671486190362e-5, 4.240234625722821e-8, 1.829646244328896e-7, -3.4162881772219673e-8, 5.052672305665603e-9, -6.915278146409539e-10, 9.13443356833262e-11, -1.182947617176892e-11, 1.5120554746796365e-12, -1.913107497043882e-13, 2.3992429137170702e-14, -2.9831461375214494e-15, 3.6359804056473876e-16, -4.3483735131151964e-17),
    (0.0010290546300692255, 0.0013497905923094754, 0.00027707206357389865, 4.51144297849869e-6, -1.0292497223433427e-6, 1.1796227979604315e-7, -1.1967574172830111e-8, 1.132441103188451e-9, -9.794678927875038e-11, 7.0410357810394654e-12, -2.504997366944058e-13, -4.630677318104206e-14, 1.559354463497407e-14, -3.180504362480796e-15, 5.683821469038008e-16, -5.979013580533395e-17, 2.6599093298311044e-18),
    (6.687359489536673e-5, 0.00011647035990060742, 3.943482378259598e-5, 3.0194497044794365e-6, -2.3696653600044752e-7, 1.2320926021160499e-8, -6.225014487443257e-11, -1.162205726568024e-10, 2.5082264441059673e-11, -4.039109959040957e-12, 5.808208505805301e-13, -7.854731348760769e-14, 1.0211355960672998e-14, -1.2441452580987342e-15, 1.5858625176945474e-16, -4.760370338659688e-17, -1.135521075316485e-17),
    (2.385256856462318e-6, 5.739407876919868e-6, 3.5226348930461262e-6, 6.185456590030722e-7, -1.084049230809202e-8, -2.190051149123041e-9, 4.131057060836724e-10, -5.205402164009024e-11, 5.564460582122936e-12, -5.159519819081754e-13, 3.792343715443841e-14, -1.1235982395509335e-15, -3.3319030155911617e-16, 1.2326356614737164e-16, 2.6930226711824322e-17, 1.454818615113466e-17, -1.3473018996753202e-17),
    (-1.6137403155425113e-8, 4.1257893079461445e-8, 1.6538201009470157e-7, 6.788839749153136e-8, 4.029666696215341e-9, -6.207358822627421e-10, 4.824098119911598e-11, -1.693247810141399e-12, -2.611670139411141e-13, 7.927555940695943e-14, -1.420322582472996e-14, 2.148194482956656e-15, -2.8085001860706784e-16, 5.0207510900888175e-17, -3.0107320242033113e-17, -1.6039733526562652e-17, -9.251858538542971e-19),
    (-6.997107087370706e-9, -1.3949769864862107e-8, -7.934152902704428e-10, 3.757127215436312e-9, 8.322436712472666e-10, -3.6649334106168826e-11, -3.159007354157282e-12, 8.998588861141588e-13, -1.3038378247435626e-13, 1.472143278077493e-14, -1.3847162633741768e-15, 7.287713861667547e-17, 8.742493400768876e-18, 2.898916726848598e-17, 5.558428778375106e-17, 8.056545936875397e-18, 8.0953762212251e-18),
    (-3.475566141743908e-10, -7.792402015268337e-10, -5.792298251598596e-10, 2.9220059707069234e-12, 6.664179333100393e-11, 4.55605806149009e-12, -9.997978838066283e-13, 9.158497531669135e-14, -3.4008603225221813e-15, -5.892262876342051e-16, 1.3751028949512038e-16, -4.576039371656585e-17, -3.059203317795182e-17, 5.334329626583005e-17, -1.0166869684845248e-17, -8.142167076723053e-17, -1.0892617826237701e-17),
    (-1.7823033024645916e-12, -1.0950919501398382e-12, -2.5034271930526545e-11, -1.3272139916852746e-11, 1.2308217915016448e-12, 8.348700124937886e-13, -4.482063025541763e-14, -4.985655991825472e-15, 1.4633375078083183e-15, -2.34818295464016e-16, 5.441157057177307e-17, -1.6866621679070354e-18, 2.8414869440719565e-17, 5.26098908042935e-17, -1.3694197995286436e-17, 4.473932023781346e-17, -4.703884534850456e-17),
    (6.458498738708592e-13, 1.4029136297104228e-12, 4.735233950265536e-13, -6.342103686784449e-13, -1.9181825762182335e-13, 3.907689888361905e-14, 5.6055552760446755e-15, -1.2115896318714752e-15, 8.51098705401121e-17, 1.7915022406687615e-17, -2.0241711447684596e-17, -7.65183973870131e-18, -1.2379401540573186e-17, 1.0888715459957138e-17, -1.6653211639044635e-17, -3.4321011011050105e-17, 1.393561192368035e-17),
    (2.7324959424775604e-14, 3.907743124841469e-14, 6.738055444687836e-14, 1.1961023635894319e-14, -1.3028000933734033e-14, -1.4806327810116824e-15, 6.529936011554344e-16, -1.4252961100147407e-17, -5.3660779523549233e-17, -2.1525735640715083e-18, 1.2052270857744753e-17, -2.467498527115314e-18, -2.8453132321271934e-17, -1.4067993023745768e-17, 2.3561099657604492e-17, 3.084881291547597e-17, -4.452456921673805e-18),
    (-4.861851662004331e-16, -1.1349136900210307e-15, 6.629988114763488e-16, 1.838844507095637e-15, 6.066308797414785e-17, -2.2251965068465926e-16, 1.5116144248073748e-17, -7.653361311318114e-18, -1.0177044392397268e-17, 1.1934714453086414e-17, 1.5351975243149633e-17, 2.8410028004834556e-18, -4.40097426047705e-17, -3.267371334507429e-17, 5.973574546276491e-18, -4.3691123062275254e-18, 9.714451465470119e-18)   
)

function struvek_up_recurrence(x::T, knu, knum1, nu_start, nu_end) where T
    x_2 = x / 2
    two_x = 2 / x
    c = x_2^nu_start / (sqrt(π) * gamma(nu_start + T(3)/2)) 
    while nu_start < nu_end + 0.5 # avoid inexact floating points when nu isa float
        knum1, knu = knu, muladd(nu_start*two_x, knu, c - knum1)
        c *= x_2 / (nu_start + T(3)/2)
        nu_start += 1
    end
    return knum1, knu
end
